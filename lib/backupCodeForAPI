import 'dart:async';
import 'dart:convert';

import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;

Future<Server> fetchServerData() async {
  final response =
      await http.get('https://api.mcsrvstat.us/2/sams.serverminer.com');

  if (response.statusCode == 200) {
    // If the server did return a 200 OK response,
    // then parse the JSON.
    return Server.fromJson(json.decode(response.body));
  } else {
    // If the server did not return a 200 OK response,
    // then throw an exception.
    throw Exception('Failed to get Server Information');
  }
}

class Server {
  final String serverIP;
  final bool serverOnline;

  Server({this.serverIP, this.serverOnline});

  factory Server.fromJson(Map<String, dynamic> json) {
    return Server(
      serverIP: json['ip'],
      serverOnline: json['online'],
    );
  }
}

void main() => runApp(MyApp());

class MyApp extends StatefulWidget {
  MyApp({Key key}) : super(key: key);

  @override
  _MyAppState createState() => _MyAppState();
}

class _MyAppState extends State<MyApp> {
  Future<Server> futureServer;

  @override
  void initState() {
    super.initState();
    futureServer = fetchServerData();
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Survival Asia Stats',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: Scaffold(
        appBar: AppBar(
          title: Text('Survival Asia Stats'),
        ),
        body: Center(
          child: FutureBuilder<Server>(
            future: futureServer,
            builder: (context, snapshot) {
              if (snapshot.hasData) {
                return Text("Server IP: " +
                    snapshot.data.serverIP +
                    "\n" +
                    "Server Online: " +
                    snapshot.data.serverOnline.toString());
              } else if (snapshot.hasError) {
                return Text("${snapshot.error}");
              }

              // By default, show a loading spinner.
              return CircularProgressIndicator();
            },
          ),
        ),
      ),
    );
  }
}
